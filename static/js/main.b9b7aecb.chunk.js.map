{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_BUTTON_ALPHABETICALLY","SORT_BUTTON_LENGTH","App","useState","sortButtonName","setSortButtonName","isReversed","setIsReversed","sortField","goods","prepareGoods","sort","good1","good2","localeCompare","length","reverse","getPreparingGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAA6B,iBAC7BC,EAAqB,SA4BpB,IAAMC,EAAM,WACjB,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA7BR,SAA2BC,EAAOL,EAAgBE,GAChD,IAAII,EAAY,YAAOD,GAEvB,OAAQL,GACN,KAAKJ,EAA4BU,EAAeA,EAC7CC,MAAK,SAACC,EAAOC,GAAR,OACJD,EAAME,cAAcD,MAEtB,MAEF,KAAKZ,EAAoBS,EAAeA,EACrCC,MAAK,SAACC,EAAOC,GAAR,OACJD,EAAMG,OAASF,EAAME,UAEvB,MAEF,QAASL,EAAY,UAAOX,GAO9B,OAJIO,IACFI,EAAeA,EAAaM,WAGvBN,EAMWO,CAChBlB,EACAK,EACAE,GAOF,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,SACA,UACA,CAAE,WAAYhB,IAAmBJ,IAErCqB,QAAS,kBAAMhB,EAAkBL,IARnC,iCAaA,wBACEmB,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,WAAYhB,IAAmBH,IAErCoB,QAAS,kBAAMhB,EAAkBJ,IARnC,4BAaA,wBACEkB,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,YAAad,IAEnBe,QAAS,kBAAMd,GAAeD,IARhC,sBAaEA,GAAcF,IACd,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAnDI,WACZhB,EAAkB,IAClBE,GAAc,IA8CR,sBAUJ,6BACGC,EAAUc,KAAI,SAAAC,GAAI,OACjB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCjHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b9b7aecb.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_BUTTON_ALPHABETICALLY = 'alphabetically';\nconst SORT_BUTTON_LENGTH = 'length';\n\nfunction getPreparingGoods(goods, sortButtonName, isReversed) {\n  let prepareGoods = [...goods];\n\n  switch (sortButtonName) {\n    case SORT_BUTTON_ALPHABETICALLY: prepareGoods = prepareGoods\n      .sort((good1, good2) => (\n        good1.localeCompare(good2)\n      ));\n      break;\n\n    case SORT_BUTTON_LENGTH: prepareGoods = prepareGoods\n      .sort((good1, good2) => (\n        good1.length - good2.length\n      ));\n      break;\n\n    default: prepareGoods = [...goodsFromServer];\n  }\n\n  if (isReversed) {\n    prepareGoods = prepareGoods.reverse();\n  }\n\n  return prepareGoods;\n}\n\nexport const App = () => {\n  const [sortButtonName, setSortButtonName] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const sortField = getPreparingGoods(\n    goodsFromServer,\n    sortButtonName,\n    isReversed,\n  );\n  const reset = () => {\n    setSortButtonName('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-info',\n              { 'is-light': sortButtonName !== SORT_BUTTON_ALPHABETICALLY },\n            )}\n          onClick={() => setSortButtonName(SORT_BUTTON_ALPHABETICALLY)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-success',\n              { 'is-light': sortButtonName !== SORT_BUTTON_LENGTH },\n            )}\n          onClick={() => setSortButtonName(SORT_BUTTON_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-warning',\n              { 'is-light': !isReversed },\n            )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortButtonName) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortField.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}